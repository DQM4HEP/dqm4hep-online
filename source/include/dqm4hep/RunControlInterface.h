/// \file RunControlInterface.h
/*
 *
 * RunControlInterface.h header template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_RUNCONTROLINTERFACE_H
#define DQM4HEP_RUNCONTROLINTERFACE_H

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/Run.h>

namespace dqm4hep {

  namespace online {
    
    class RunControlServer;

    /** RunControlInterface class
     */
    class RunControlInterface
    {
      friend class RunControlServer;
    public:
      /** Destructor
       */
      virtual ~RunControlInterface();
      
      /** Read settings from a simple key/value map
       */
      virtual void readSettings(const dqm4hep::core::StringMap &parameters) = 0;
      
      /** Whether calling the run() method is blocking
       */
      virtual bool runBlocking() const = 0;
      
      /** Run the user run control
       */
      virtual void run() = 0;

      /** Stop the user run control
       */
      virtual void stop() = 0;

    protected:
      /** Start a new run
       */
      void startNewRun(const dqm4hep::core::Run &run, const std::string &password = "");
      
      /** End the current run
       */
      void endCurrentRun(const std::string &password = "");
      
    private:
      /** Set the run control server
       */
      void setServer(RunControlServer *srv);
      
    private:
      RunControlServer     *m_pServer = nullptr;
    };

  }

}

#endif  //  DQM4HEP_RUNCONTROLINTERFACE_H
